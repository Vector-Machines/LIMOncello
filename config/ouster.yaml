limoncello:
  ros__parameters:

    topics:
      input:
        lidar: /ouster/points
        imu:   /ouster/imu
        stop_ioctree_update: /limoncello/stop_update
        # imu: /EL/Sensors/vectornav/IMU
      output:
        state: state  
        frame: full_pcl
    
    frames:
      # output frames (the transform between frames will be broadcasted)
      world: global
      body: base_link
      tf_pub: false

    verbose: false   # print performance board
    debug: true     # fill useful intermediate pcl (deskewed, processed ...) 
                    # for visualizing purposes

    sensors:
      lidar:
        type: 0 # LiDAR type (0: OUSTER \ 1: VELODYNE \ 2: HESAI \ 3: LIVOX)
        end_of_sweep: false # whether the sweep reference time is w.r.t. the
                            # start or the end of the scan (only applies to VELODYNE/OUSTER)
      imu:
        hz: 100

      calibration:  # automatic IMU calibration (if all set to false, no calibration will be done)
        gravity: true     # estimate gravity vector
        accel: true             # estimate lin. accel. bias
        gyro: true              # estimate ang. vel. bias
        time: 3.               # time to estimate (during this time, the 
                               # robot must be at stand still)

      time_offset: true # whether to take into account a possible sync offset
                        # between IMU and LiDAR (set to true if they are not properly in sync)
      TAI_offset: 0.

      extrinsics:
        imu2baselink:
          t: [0.0, 0.0, 0.98 ]  # (x, y, z) [meters]
          R: [0., -8.25, 91.25]       # roll, pitch, yaw [deg]

        lidar2baselink:
          t: [0., 0.,  0.98] # (x, y, z) [meters]
          R: [0., -8.25, 91.25]     # roll, pitch, yaw [deg]

        gravity: 9.80304


      intrinsics:
        accel_bias: [ 0.0001, 0.0001, 0.0001 ]  # [m/s^2]
        gyro_bias:  [ 0.0001, 0.0001, 0.001 ]  # [rad/s]
        sm: [ 1.,  0.,  0.,
              0.,  1.,  0.,
              0.,  0.,  1. ]

        # (if your IMU doesn't comply with axis system ISO-8855, 
        # this matrix is meant to map its current orientation with respect
        # to the standard axis system)
        #
        #   Y-pitch
        #   ^   
        #   |  
        #   | 
        #   |
        # Z-yaw o-----------> X-roll

      
    filters:
      voxel_grid:
        leaf_size: [ .5, .5, .5 ]

      min_distance: # sphere crop
        active: true
        value: 5.5  # [m]

      fov: # crop field of view
        active: true
        value: 180.  # [deg]
      
      rate_sampling: # quick downsample
        active: false
        value: 2


    IKFoM:  # Iterative Kalman Filter on Manifolds lib
      query_iters: 4 # number of iterations doing KNN from max iterations 
      max_iters: 4  # max num of iterations of the IESEKF
      tolerance: 0.0001                      
      lidar_noise: 0.0005

      covariance:
        gyro: 9.468559e-05        # [m^2/s^2]
        accel: 0.002387           # [rad^2]
        bias_gyro: 1.171673e-05   # [m^2/s^2 * sqrt(s)]
        bias_accel: 0.00029152    # [rad/s * sqrt(s)]
      
      plane:                     # plane features for point to plane ICP
        points: 15                # num of points that constitute a plane
        max_sqrt_dist: 1.0       # [m] if a neighor exceeds is too far the plane is not valid
        plane_threshold: 0.1  # [m] max distance from point to plane to be 
                                 # considered a valid plane 
        

    iOctree:
      min_extent: 0.2
      bucket_size: 2
      downsample: true
